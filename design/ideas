Order of plugins has to be configurable, e.g.. external menu entries have to be added before tree is
sorted

For example, one plugin could substitute smiley character to images

file name generators:

   File generation should be abstract, individual plugins should do the actual generation or naming
   of files. One possiblity is that filenames with directories are created, or everything is stored
   in one directory. File name generation should not depend on other files. A name is given to the
   generator and it should return a fully qualified file name.


All the files should be checked after generation if they are compatible to XHTML 1.1. The used CSS
standard will be CSS 2.0.

Plugins can have ressources:

   This is necessary so that plugins can provide, for example, css fragments which they need so that
   the generated XHTML code looks good.

   Ressources can either reside in the configuration file or in a separate file. The separate file
   should be under the ressource directory of the distribution or in the file which is stated in the
   configuration file.

   tag <resource>, other plugins can specify resources, javascript or css, writes link to approriate
   file (where all resources have been written to), after all files generated writes the resource
   files

   configuration should provide getResourcePath method which returns the correcct path to a resource
   or nil if the resource does not exist

Validation:

   After generating the XHTML pages, it should be possible to check if the pages are really XHTML
   1.1 compatible.If a Ruby validator is available, use it. Otherwise use an external tool to verify
   this. Under Linux, for examle, xmllint from the libxml2 package. Under Windows, for example, the
   Microsoft Parser.

Gallery, Blog, Wiki,...

   Enable easy integration of such web sites. Galleries could be, for example, generated using this
   program, Wiki's and Blog could be added. External references are specified in the configuration
   file. The name of the reference and the URL have to be specified. If needed >>> the external
   reference can appear in the menu (specify order value and under which menu item the reference
   should appear)

If possible, only read the necessary parts of the files, and only when generating the XHTML files
themselves read in the whole file. Evenentually first use the SAX parser to read in only the
appropriate things, when generating use DOM parser.

Smiley plugin: replace all smiley character sequences with images; uses hook system; provides
  ressources (smileys), different sets of smileys; configureable;

language plugin: has resource list for mapping language code to language names; only visible if more
  than one language;

sitemap plugin: provides a sitemap, uses the <sitemap> tag. controller traverses the tree structure,
  feeds data to style plugin, following hooks: start/end sitemap, start/end submenu, entry
  similar to menu plugin, but with all available page nodes (configuration option for extending
  output to all nodes), one time generation for each depth level

database text plugin: fetches text from a database during the creation of the page; uses the
  <database> tag

dummy plugin: holds dummy text that is not used in generation, can be used to better visualize the
  template files, dummy tag is ignored completely in generation and elsewhere done
