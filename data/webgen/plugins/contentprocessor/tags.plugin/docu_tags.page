--- documentation, pipeline:maruku
Description
-----------

This processor provides an easy method for adding dynamic content to web
pages. It uses the so called tag plugins to replace special markup
constructs (namely webgen tags) with dynamic content. This system allows
webgen to generate menus and breadcrumb trails, include files and much
more. webgen already comes with many tag plugins that handle simple
things, like including a file, to advanced things, like generating a
menu. These tag plugins reside in the Tag namespace.

Each webgen tag is defined using a unique name and handled by a tag
plugin. A tag can have zero or more parameters some of which are
mandatory. You can see the supported parameters (and if they are
mandatory) for each tag on the page of the tag plugin which is used for
processing the tag. The default mandatory parameter can be specified in
a special way, see the following section.

When a content string is parsed and a webgen tag is encountered, the
registered plugin for this tag name is called. If no plugin for a tag
exists there are two possibilities: if a default tag plugin exists, then
this default plugin is called. Otherwise an error is raised. The default
plugin is defined using the special tag name `:default`.

For information on how to create such a tag plugin have a look at the
API documentation of the class Tag::DefaultTag.


Syntax for webgen Tags  {#tags}
----------------------

webgen tags are defined using a special markup construct which consists
of the tag name, a parameter part and a body part.

A tag can be specified in one of the following ways:

*   The simplest form of a webgen tag just consists of the tag name
    itself. This form can only be used if the tag does not have any
    mandatory parameters.

         \{tagname:}

*   If a plugin has only one mandatory parameter, there is a short-cut
    syntax for specifying its value.

         \{tagname: value}

*   If a plugin has more than one mandatory parameter or if some default
    parameter values should be overwritten, one needs to use the
    following general form.

         \{tagname: {key: value, key2:value}}

    > The parameters defined using this syntax are actually specified
    > using a hash in YAML markup.
    {.info}

*   Additionally, you can use a body part with any of the above forms. To
    specify that the tag has a body part, just use two colons instead of
    one after the tag name and don't forget the closing tag.

         \{tagname::}Here comes the body{tagname}

Sometimes you need to specify something which looks like a webgen tag
but should not be processed like one. In such cases, you need to escape
the tag with a backslash, like this:

    \\\{tagname: {key:value}}

Another solution to this is to specify a general prefix for all webgen
tags using the {param: ContentProcessor/Tags:prefix} parameter. Let's
imagine that you set the prefix to `webgen:`; then this plugin will only
process tags of the form `\{webgen:tagname: {key: value}}`.
