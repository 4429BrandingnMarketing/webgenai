--- documentation, pipeline:maruku
Description
-----------

The FileHandler plugin is the main plugin of webgen. When running webgen
it is responsible for traversing the source directory and creating the
internal representation of all handled files as well as writing the
output files by using the individual file handler plugins. These file
handler plugins reside in the File/ namespace. Also, the FileHandler is
responsible for managing the [meta information backing
file](#metainfo-file).

There are many different file handler plugins available, ranging from
very simple ones, like copying a file verbatim from the source to the
output directory, to complicated ones, like creating HTML files from
page files or creating whole image galleries from a simple gallery
defintion file!

The following sections give an overview of how the [file
handling](#filehandling) is done by webgen and how to specify and use
[meta information](#metainfo).


Handling of files in the source directory {#filehandling}
-----------------------------------------

Following is the list of rules how files in the source directory are
handled by webgen:

* All file/directory names in the source directory are fetched
  (actually, only those file/directory names without a leading dot).

* Those files which match an Core/FileHandler:ignorePaths pattern are
  excluded.

* The path patterns for each file handler plugin are matched against the
  remaining files and all matching files are then handled by the file
  handler plugin.

As you might have deduced from the processing list above, it is possible
that one file/directory is handled by multiple file handler
plugins. This can be used, for example, to render an XML file as HTML
and copy it verbatim.

Internally a tree structure is created reflecting the source directory
hierarchy and each file that will be created by webgen is represented by
a node in the tree, as displayed in the following in image.

<img src="{relocatable: /images/node_diagram.png}" alt="Internal tree
structure" />

The source directory layout is shown on the left side and the internal
tree structure/output layout on the right. As you can see, some files
are copied verbatim (e.g. the images), others are copied not all
(e.g. `default.template`) and still others have multiple output files
(e.g.  `project/documentation.page`).


### File Naming Convention ### {#filehandling-naming}

webgen assumes that the files in the source directory follow a special
naming convention sothat meta information can be extracted correctly
from the filename:

    [orderInfo.]basename[.lang].extension

*   `orderInfo`

    This part is optional and has to consist purely of the digits 0 to
    9. It's value is used for the meta information `orderInfo`. If not
    specified, it defaults to the value zero.

*   `lang`

    This part is optional and has to be an
    [ISO-639-1/2](http://www.loc.gov/standards/iso639-2/) language
    identifier (two or three characters (a-z) long). If not specified,
    it is assumed that the page is language independent (for example,
    images are normally not specific for a specific language). However,
    this behaviour may be different for some file handler plugins (for
    example, the File/PageHandler assumes that the file is written in
    the default language set via the Core/Configuration:lang parameter).

*   `extension`

    The file extension can be anything.

*   `basename`

    This part is used on the one hand to generate the `title` meta
    information (but with these transformations: `_` and `-` become
    spaces). And on the other hand, the canonical name is derived from
    it. `basename` must not contain any dots. Also: if two files have
    the same `basename` part, they should define the same content for
    different languages.

Following are some examples of file names:

|Filename                  | Parsed meta information
|--------------------------|------------------------------------------------
|`name.png`                | title: Name, language: none, orderInfo: 0, basename: name, cn: name.png
|`name.de.png`             | title: Name, language: de, orderInfo: 0, basename: name, cn: name.png
|`01.name_of-file.eo.page` | title: Name of file, language: eo, orderInfo: 1, basename: name\_of-file, cn: name\_of-file.page

Notice: The first two examples define the same content for two different
languages (or more exactly: the first one is unlocalized and the second
one localized to German) as they have the same canonical name.


### Canonical Name of a File ### {#filehandling-cn}

webgen provides the functionality to define the same content in more
than one language, ie. to localize content. This is achieved with the
_canonical name_ of a file.

When multiple files share the same canonical name, webgen assumes that
they have the same content but in different languages. It is also
possible to specify a _language independent_ file which is used as a
fallback. Therefore when a file should be resolved using a canonical
name and a given language, it is first tried to get the file in the
requested language. If this is not possible (ie. no such localization
exists), the unlocalized file is returned if it exists.

It is also possible to use the _localized canonical name_ of a file to
resolve it. The localized canonical name is the same as the canonical
name but with a language code inserted before the extension. If the
localized canonical name is used to resolve a file, a possibly
additionally specified language is ignored as it is assumed that the
user really only wants the file in the specified language!

This also means that all files are not resolved using their real source
or output names but using the (localized) canonical name! This is
different from previous webgen versions!


File Meta Information {#metainfo}
---------------------

Each file can have meta information, i.e. information about the file
itself, associated with it, for example the title of the file, if it
should appear in a menu and so on. Some file types allow this meta
information to be specified directly in the file, e.g. page
files. However, meta information can also be specified in the [meta
information backing file](#metainfo-file).


### The `defaultMetaInfo` parameter ### {#metainfo-param}

This parameter can be used to override the default meta information set
for a file handler plugin.  The keys are the names of file handler
plugins and the values are the meta information. You can either set the
parameter directly or use the special functionality provided by the <a
href="{relocatable: /documentation/basics.page#config}">configuration
file (TODO)</a> to set it for a file handler plugin.


### The meta information backing file ### {#metainfo-file}

The meta information backing file contains meta information about
files/directories in the source directory. It has two sections both of
which have to be in YAML format and both have to have the same
structure: a source backing section and an output backing section which
is optional.

The source backing section is used to apply meta information to a file
before a node for this file is created. A file handler plugin can
therefore use this meta information during the creation of the
node. Make sure that you use a valid source path, i.e. a path that
resolves to a file in the source directory!

The output backing section is used to apply meta information after _all_
nodes have been created and to create so called "virtual nodes". The
paths specified in the output backing section have to be valid output
path, not source paths! If a specified path resolves to an already
created node, the meta information is applied to this node. Otherwise, a
virtual node is created with the specified meta information and empty
content - a virtual node _never_ creates a real output file! This
facility can be used, for example, to include links to external web
pages in menus or to create the a whole menu with custom sections and
multiple reference in different sections to the same node!

Following is a sample meta information backing file with explanations
afterwards:

    index.page:
      inMenu: true
      orderInfo: 2

    images:
      indexFile: ~
    ---
    index.page:
      inMenu: false

    wiki.html:
      title: Link to wiki
      url: http://myhost.com/path/to/my/wiki
      inMenu: true
      orderInfo: 5

    api.html:
      title: API Reference
      url: http://myhost.com/api

    virtdir/:
      indexFile: index.html

    virtdir/index.html:
      title: A virtual index file
      inMenu: true
      url: /index.page

    virtdir/other.html:
      inMenu: true
      url: /otherdir/linked.de.page

The above sample meta information backing file consists of both
sections: the mandatory source section and the optional output
section. As you can see each section is described using a hash of
hashes, i.e. the keys are paths and the values are the meta information
hashes.

The source section specifies additional meta information for the
`index.page` file and for the `images` directory: the `index.page` gets
the `inMenu` and `orderInfo` meta information set and it is specified
that the `images` directory has no `indexFile`.

The output section is more interesting than the source section:

* The first entry references an existing file, therefore the meta
  information for that file (`index.page`) is set appropriately.

* The second entry specifies that under the `root` directory a virtual
  node with the path `wiki.html` should be created (the node will be
  virtual as the path references no existing file).  It should have the
  specified title and should be in the menu with the specified
  order. Furthermore, a special *`url`* key is used. This key can only
  be used for virtual file nodes (not directory nodes) in the output
  section and it specifies the link target for the node.  So, whenever a
  reference to `wiki.html` is requested the resolved `url` is
  returned. This `url` can be a link to an outside page or it can refer
  to another node, as described below. The `url` is assumed to be
  relative to the directory the virutal node is in.

* The third entry also specifies a virtual node linking to an external
  page, but one which will not appear in a menu. Such nodes are normally
  inserted into the output section so that the Tag/Relocatable can be
  used.

* The last three entries add virtual entries to the menu to show how one
  page can appear in more than one directory: the `virtdir/index.html`
  links to the top level `index.page` and `virtdir/other.html` links to
  a page in another subdirectory, namely `/otherdir/linked.de.page`.


### Processing order ### {#metainfo-processing}

There is clearly defined order in which meta information is applied to a
node for a file:

1. The default meta information for a node is specified via a directive
   in the plugin file handler that creates the node (this means that it
   is possible that no default meta information is specified). If such a
   default meta information is set for a plugin file handler it is shown
   on its plugin documentation page.

2. Overridden by values that are set for the plugin file handler for the
   node in the Core/FileHandler:defaultMetaInfo parameter.

3. Overridden by the meta information extracted from the filename.

4. Overridden by the meta information specified for the file in the
   source backing section of the meta information backing file.

5. Now the node is created by the file handler plugin with this meta
   information. During the node creation, it is possible that the meta
   information is overridden by meta information extracted from the file
   by the file handler plugin (e.g. the File/PageHandler uses the meta
   information specified in the file itself).

6. After all nodes are created, meta information specified in the output
   backing section of the meta file backing file is applied.

