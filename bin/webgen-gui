#!/usr/bin/env ruby
# -*- ruby -*-

begin
  require 'RMagick'
rescue
  # do nothing
  # RMagick has to be loaded before Qt else an error occursr
end
require 'Qt'
require 'csv'
require 'cgi'
require 'webgen'

class WebgenWebsite

  attr_reader :directory

  def initialize( directory )
    @directory = directory
  end

  def files
  end

  def self.languages
    unless defined?( @@languages )
      @@languages = []
      code_file = File.join( Webgen::Configuration.data_dir, 'data/ISO-639-2_values_8bits.txt' )
      CSV::Reader.parse( File.open( code_file, 'r' ), ?| ) do |row|
        @@languages << [row[0].data, row[3].data] unless !@@languages.last.nil? && @@languages.last[0] == row[0].data && @@languages.last[1] == row[3].data
      end
    end
    @@languages
  end

  def self.templates
    Dir[File.join( Webgen::Configuration.data_dir, 'website_templates', '*' )].collect {|f| File.basename( f )}
  end

  def self.styles
    Dir[File.join( Webgen::Configuration.data_dir, 'website_styles', '*' )].collect {|f| File.basename( f )}
  end

end

class NewWebsiteDialog < Qt::Dialog

  slots 'choose_dir()', 'check_input()', 'create_website()'
  signals 'input_valid(bool)'

  def initialize( parent )
    super( parent )
    setCaption( "Create new website..." )
    setup_window
  end

  def setup_window
    layout = Qt::VBoxLayout.new( self, 10, 10 )

    mainLayout = Qt::GridLayout.new( 5, 2, 3 )

    mainLayout.addWidget( Qt::Label.new( "Directory:", self ), 0, 0 )
    box = Qt::HBoxLayout.new( 3 )
    @directory = Qt::LineEdit.new( self )
    @directory.setText( Dir.pwd )
    connect( @directory, SIGNAL('textChanged(const QString&)'), self, SLOT('check_input()') )
    dirChooser = Qt::PushButton.new( "...", self )
    connect( dirChooser, SIGNAL('clicked()'), self, SLOT('choose_dir()') )
    box.addWidget( @directory )
    box.addWidget( dirChooser )
    mainLayout.addLayout( box, 0, 1 )

    mainLayout.addWidget( Qt::Label.new( "Website name:", self ), 1, 0 )
    @website = Qt::LineEdit.new( self )
    @website.setFocus()
    connect( @website, SIGNAL('textChanged(const QString&)'), self, SLOT('check_input()') )
    mainLayout.addWidget( @website, 1, 1 )

    mainLayout.addWidget( Qt::Label.new( "Website template:", self ), 2, 0 )
    @template = Qt::ComboBox.new( self )
    @template.insertStringList( WebgenWebsite.templates.sort )
    @template.setCurrentText( 'default' )
    mainLayout.addWidget( @template, 2, 1 )

    mainLayout.addWidget( Qt::Label.new( "Website style:", self ), 3, 0 )
    @style = Qt::ComboBox.new( self )
    @style.insertStringList( WebgenWebsite.styles.sort )
    @style.setCurrentText( 'default' )
    mainLayout.addWidget( @style, 3, 1 )

    mainLayout.addWidget( Qt::Label.new( "Main language:", self ), 4, 0 )
    @language = Qt::ComboBox.new( self )
    @language.insertStringList( WebgenWebsite.languages.collect {|l| l[1]}.sort )
    @language.setCurrentText( 'English' )
    mainLayout.addWidget( @language, 4, 1 )

    box = Qt::HBoxLayout.new( 3 )
    box.addStretch( 1 )
    @cancel = Qt::PushButton.new( "Cancel", self )
    connect( @cancel, SIGNAL('clicked()'), self, SLOT('reject()') )
    box.addWidget( @cancel )
    @create = Qt::PushButton.new( "Create", self )
    @create.setEnabled( false )
    connect( @create, SIGNAL('clicked()'), self, SLOT('create_website()') )
    connect( self, SIGNAL('input_valid(bool)'), @create, SLOT('setEnabled(bool)') )
    @create.setDefault( true )
    box.addWidget( @create )

    layout.addLayout( mainLayout )
    layout.addLayout( box )
    layout.setResizeMode( Qt::Layout::Fixed )

    check_input
  end

  def choose_dir
    newdir = Qt::FileDialog.getExistingDirectory( @directory.text, self, nil, "Select website base directory" )
    @directory.setText( newdir ) unless newdir.nil?
  end

  def check_input
    valid = true

    #check website parent dir
    if File.directory?( @directory.text )
      @directory.unsetPalette()
    else
      valid = false
      @directory.setPalette( WebgenGUI::ERROR_PALETTE )
    end

    # check website name
    if File.exists?( File.join( @directory.text, @website.text ) )
      valid = false
      @website.setPalette( WebgenGUI::ERROR_PALETTE )
    else
      @website.unsetPalette()
    end

    emit input_valid( valid )
  end

  def website_directory
    File.join( @directory.text, @website.text )
  end

  #######
  private
  #######

  def create_website
    template = @template.currentText
    style = @style.currentText
    lang = WebgenWebsite.languages.rassoc( @language.currentText )[0]
    begin
      Webgen.create_website( website_directory, template, style )
      File.open( File.join( website_directory, 'config.yaml' ), 'a+' ) {|f| f.write( "Configuration:\n  lang: #{lang}" ) }
    rescue RuntimeError, SystemCallError => e
      Qt::MessageBox.critical( self, "Creation error", "Could not create website: \n#{e.message}",
                               Qt::MessageBox::Ok, Qt::MessageBox::NoButton, Qt::MessageBox::NoButton )
      return
    end
    accept
  end

end


class Object

  def self.set_logger( logger, set_it = false )
    @@logger = logger if set_it
  end

end

class WebgenGUILogger < Webgen::Logger

  def format_message( severity, timestamp, msg, progname )
    color = case severity
            when 'ERROR' then '#ff0000'
            when 'WARN' then '#880000'
            when 'INFO' then '#008800'
            when 'DEBUG' then '#aaaaaa'
            end
    msg.gsub!(/&/, '&amp;')
    msg.gsub!(/>/, '&gt;')
    msg.gsub!(/</, '&lt;')
    "<font color=#{color}><b>%s</b> %5s -- %s: %s</font>" % [timestamp, severity, progname, msg ]
  end

end


class LogWidget < Qt::TextEdit

  slots 'toggleShown()'

  # Create a LogWindow
  def initialize( p )
    super( p )
    setTextFormat( Qt::LogText )
    setFont( Qt::Font.new( "Courier" ) )
    Object.set_logger( WebgenGUILogger.new( self, 0, 0, logger.level ), true )
  end

  # Invoked by the logger library for writing log messages.
  def write( message )
    self.append( message )
  end

  # Invoked by the logger library for closing the log device. Does nothing.
  def close; end

  def toggleShown
    if isShown then hide else show end
  end

end

class WebgenGUI < Qt::MainWindow

  ERROR_PALETTE = Qt::Palette.new( Qt::red.light, Qt::red.light )
  ERROR_PALETTE.setColor( Qt::Palette::Active, Qt::ColorGroup::Base, Qt::red.light )
  ERROR_PALETTE.setColor( Qt::Palette::Inactive, Qt::ColorGroup::Base, Qt::red.light )

  slots 'new()', 'open()', 'save()', 'preview_page()', 'preview_text()', 'filter_files()',
  'run_webgen()'

  def initialize
    super
    setCaption( 'webgen GUI' )
    setup_window
    setup_menus
    @website = WebgenWebsite.new( '/home/thomas/work/projects/trunk/webgen/DIR' )
  end

  def new
    dlg = NewWebsiteDialog.new( self )
    if dlg.exec == Qt::Dialog::Accepted
      @website = WebgenWebsite.new( dlg.website_directory )
    end
  end

  def open
    #TODO save files in existing dir if necessary
    dir = Qt::FileDialog.getExistingDirectory( @website.directory, self, nil, "Select website directory" )
    unless dir.nil?
      @website = WebgenWebsite.new( dir )
      #TODO init website
    end
  end

  def save
    #TODO What to save???
  end

  def preview_page
    @old = @pageEditor.text
    @pageEditor.setTextFormat( Qt::RichText )
    @pageEditor.setText( RedCloth.new( @old ).to_html )
  end

  def preview_text
    @pageEditor.setTextFormat( Qt::PlainText )
    @pageEditor.setText( @old )
  end

  def filter_files
    # set_file_list
    # set status text
  end

  def run_webgen
    @log.clear
    before = Time.now
    Webgen.run_webgen( @website.directory )
    # call external command
    diff = Time.now - before
    puts diff
  end

  #######
  private
  #######

  def setup_menus
    filemenu = Qt::PopupMenu.new( self )
    filemenu.insertItem( "&Create website dir...", self, SLOT("new()"), Qt::KeySequence.new( CTRL+Key_N ) )
    filemenu.insertItem( "&Open website dir...", self, SLOT("open()"), Qt::KeySequence.new( CTRL+Key_O ) )
    filemenu.insertItem( "&Save website", self, SLOT("save()"), Qt::KeySequence.new( CTRL+Key_S ) )
    filemenu.insertSeparator
    filemenu.insertItem( "&Quit", $app, SLOT("quit()"), Qt::KeySequence.new( CTRL+Key_Q ) )

    toolsmenu = Qt::PopupMenu.new( self )
    toolsmenu.insertItem( "&Run webgen...", self, SLOT("run_webgen()"), Qt::KeySequence.new( CTRL+Key_R ) )
    toolsmenu.insertItem( "Toogle &log window", @log, SLOT('toggleShown()'), Qt::KeySequence.new( CTRL+Key_L) )

    self.menuBar.insertItem( "&File", filemenu )
    self.menuBar.insertItem( "&Tools", toolsmenu )
  end

  def setup_window
    mainWidget = Qt::Splitter.new( Qt::Vertical, self )
    mainWidget.setOpaqueResize( true )

    upperWidget = Qt::Widget.new( mainWidget )

    left = Qt::Widget.new( upperWidget )
    setup_file_list( left )
    setup_file_view( upperWidget )

    mainLayout = Qt::HBoxLayout.new( upperWidget )
    mainLayout.setSpacing( 3 )
    mainLayout.setMargin( 3 )
    mainLayout.addWidget( left )
    mainLayout.addWidget( @fileView, 1 )

    @log = LogWidget.new( mainWidget )
    @log.hide

    setCentralWidget( mainWidget )
  end

  def setup_file_list( mainWidget )
    button = Qt::PushButton.new( 'Clear', mainWidget )
    @filter = Qt::LineEdit.new( mainWidget )
    @filter.setMinimumWidth( 200 )

    connect( button, SIGNAL('clicked()'), @filter, SLOT('clear()') )
    connect( @filter, SIGNAL('textChanged(const QString&)'), self, SLOT('filter_files()') )

    @fileList = Qt::ListBox.new( mainWidget )

    @fileStatusText = Qt::Label.new( mainWidget )
    @fileStatusText.setText( 'something' )

    filterLayout = Qt::HBoxLayout.new
    filterLayout.addWidget( @filter )
    filterLayout.addWidget( button )

    layout = Qt::VBoxLayout.new( mainWidget )
    layout.setSpacing( 3 )
    layout.addLayout( filterLayout )
    layout.addWidget( @fileList )
    layout.addWidget( @fileStatusText )
  end

  def setup_file_view( mainWidget )
    @fileView = Qt::WidgetStack.new( mainWidget )
    @fileView.setMinimumSize( 300, 300 )

    main = Qt::Widget.new( @fileView )
    @pageEditor = Qt::TextEdit.new( main )
    @pageEditor.setTextFormat( Qt::PlainText )
    button = Qt::PushButton.new( "Preview", main )
    connect( button, SIGNAL('pressed()'), self, SLOT('preview_page()') )
    connect( button, SIGNAL('released()'), self, SLOT('preview_text()') )
    layout = Qt::VBoxLayout.new( main )
    layout.setSpacing( 3 )
    layout.addWidget( @pageEditor )
    layout.addWidget( button )


    @imageViewer = Qt::Label.new( @fileView )
  end

end


$app = Qt::Application.new( ARGV )
main = WebgenGUI.new
$app.setMainWidget( main )
main.show
$app.exec
