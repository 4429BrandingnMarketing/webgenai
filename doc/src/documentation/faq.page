---
title: FAQ
---
# General Questions

## Why is webgen always run twice?

This is because of the ContentProcessor/Fragments. On the first run it scan a generated page for all
header sections and stores them in the cache. On the second run the File/FragmentHandler uses this
cached information to actually add fragment nodes to the page. These fragment nodes are then used,
for example, by Tag/VerticalMenu to provide an in-page menu.


# How to ...


This section provides quick answers and links to more information for the most commonly asked
questions. If you click on any question, the answer will appear just below it.

TODO: Use JQuery to add a toggle link to all Howto titles
TODO: categorize questions

### ... chain templates?

TODO

### ... create a website?

Use the `webgen` command to create the needed directories

    webgen create -t project -s andreas07 my_site

This will create a webgen website in the directory `my_site` using the specified template and style.

### ... apply a website/gallery/sipttra style?

TODO: rework answer after use command is implemented
Just use the `webgen` command line tool:

    webgen apply_style website STYLE_NAME
    webgen apply_style sipttra STYLE_NAME
    webgen apply_style gallery STYLE_NAME

Be aware that destination files may be overwritten!

### ... set plugin parameters?

You can set plugin parameters for all plugins via the configuration file. For example, say you want
to set the File/DefaultHandler:linkToCurrentPage parameter to `true`, then you would add
the following to the configuration file:

    File/DefaultHandler:
      linkToCurrentPage: true

There is a second possibility for tags: you can set the parameters directly in the tag definition,
like this:

    \{breadcrumbTrail: {omitLast: true, separator: ' | '}}

### ... change the default language?

To use, for example, German as the default language, put the following into the configuration file:

    Core/Configuration:
      lang: de

The value needs to be a valid ISO-639-1/2 language code.

### ... use a different processing pipeline for page files?

If you want to change the processing pipeline, you need to add the following to your configuration
file (assuming you didn't manually set the Core/FileHandler:defaultMetaInfo parameter):

    File/PageHandler:
      defaultMetaInfo:
        blocks:
          default:
            pipeline: erb;tags;textile;blocks

Substitute the value of the `pipeline` key approriately.

If you just want to change the pipeline for one block, you can do it like this:

    --- content, pipeline:erb;tags;textile;blocks
    This is the content of the block

### ... set the default meta information for files created by a specific file handler?

Use the configuration file! For example, to change the meta information `inMenu` sothat it defaults
to `true` for all page files use the following in your configuration file:

    File/PageHandler:
      defaultMetaInfo:
       inMenu: true

The special key `defaultMetaInfo` is available for all file handler plugins in the configuration
file.

### ... ignore files in the source directory?

This can be done using the Core/FileHandler:ignorePaths parameter. For example, to ignore all files
starting with `core`, you would put the following in the configuration file:

    Core/FileHandler:
      ignorePaths: [**/core*]

The value of the `ignorePaths` key has to be an array of path patterns (TODO:link). Be aware that
the parameter overwrites the default setting.

### ... change the output name style?

You have several options of varying granularity:

* Set the File/DefaultHandler:outputNameStyle parameter in the configuration file to globally change
  how the output names for files are constructed.

* Add the meta information `outputNameStyle` to the `defaultMetaInfo` of a specific file handler
  plugin in the configuration file to only change the output names of this file handler.

* Apply the meta information `outputNameStyle` to a single file via, for example, the meta
  information backing file (TODO:link).

For more information have a look at the documentation of the File/PageHandler:outputNameStyle
parameter!

### ... use embedded ruby in page/template files?

TODO: rework this answer
Have a look at the ERB section of the WebPage Format reference!

### ... modify the template chain?

First, have a look at the File/TemplateHandler documentation!

To stop the template chain at a specific template or even at the page file itself, specify a
null template in the meta information, like this:

    template: ~

To nest templates, you just need to specify the template, in which this template/page file should be
nested, in the meta information:

    template: my_special.template

Be aware that if no `template` meta information is specified for a page or template file, the
template handler automatically searches for a default template in the directory and the parent
directories of the file!

### ... localize a directory name?

Just set the `directoryName` meta information on the localized directory index files.

### ... provide additional attributes on links to a file?

You can specify additional attributes for a link to a file by using the `linkAttrs` meta
information. Take the following page file:

    ---
    title: Tutorial
    inMenu: true
    linkAttrs:
      title: This is a rather large tutorial
      accesskey: D
      tabindex: 5
    ---
    Yippieh, this is my tutorial!

When a link to this page is created the specified attributes get set on the link!

### ... add page specific sidebar content?

There are many ways to accomplish this, I will show only one way here using blocks. Add the
following to the sidebar in your `default.template` (ensure that you haven't disabled `erb` in the
processing pipeline):

    <% if node.node_info[:page].blocks.has_key?( 'sidebar' ) %>
      \{block: sidebar}
    <% end %>

This will include the contents of the block `sidebar` in the sidebar if such a block exists for a
page. You can then add a sidebar block to each page file which needs it. Following is such a sample
page file:

    This is the main content block
    --- sidebar
    This is the sidebar block and everything in here goes to the sidebar!


### ... use global variables?

TODO: check answer after copying/implementing the Tag/CustomVar plugin
First you need to set some global variables in your configuration file:

    Core/Configuration:
      customVars:
        myVar: This is really nice!
        myOtherVar: another content

Then you can use the Tag/CustomVar to output the variables:

    \{customVar: myVar}

### ... create XML output?

TODO: check this answer after implementing ContentProcessor/Builder

This can be achieved manually (by removing any markup processor in the processing pipeline of the
page file and then directly creating the XML elements) or by changing the processing pipeline to
include the ContentProcessor/Builder plugin which provides an easy way of creating an XML compliant
file.

### ... use emoticons instead of ASCII smileys?

TODO: check this answer after implementing the SmileyProcessor

Either globally enable an emoticon pack in the configuration file, like this:

    Misc/SmileyReplacer:
      emoticonPack: crystal

Or enable smiley replacement only on a specific page file using the meta information, like this:

    emoticonPack: crystal

### ... syntax highlight an included file?

TODO: rework this because now it is possible to specify a tag body

------------------- TODO -------------------------

This can be done using the Tag/IncludeFile plugin. Make sure you have `coderay` installed! Here is
an example which includes a syntax highlighted ruby file:

  \{includeFile: {filename: happy.rb, highlight: ruby}}
------------------- TODO -------------------------

### ... create a static menu?

You can use virtual nodes in the output backing section of the meta information backing file to
define virtually any menu structure you like, including things like having menu entries that point
to the same page and links to external pages.

For detailed information have a look at the meta information backing file (TODO:link) documentation!


### ... create a website template/style?

This is described in the API documentation for the Support/WebsiteManager plugin (TOOD:link).
