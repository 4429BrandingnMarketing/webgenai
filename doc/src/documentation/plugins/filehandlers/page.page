---
title: Page Handler
inMenu: true
---
h2. Information

<notextile>{describe: PageFileHandler}</notextile>

h2. Description

Page description files are used to specify the actual content for the website. They contain the
content for the webpage and, optionally, meta information.

h2(#structure). File format

The format of these files is a very simple one and can be divided into two cases:

# Only content
# Meta information and content

A simple file may look like this:
<pre>
This is the content!!!
</pre>

Only content is specified in this file. Meta information can be specified at the beginning of the
file:
<pre>
\---
title: The title set by Meta info
\---
This is the content of the file
</pre>

In this example, meta information is specified ("more info":#meta). Note the three dashes at the
beginning of the file. This indicates that the following 'block' is used for meta information. If
the three dashes at the beginning are omitted, then the parser won't know that the following block
contains meta information and thinks it is content. If not specified, the default name for the
content block is @content@.

If you want to include a line in your file which only has three dashes, you have to write this:
<pre>
\\---
</pre>

The meta information is separated from the content by another three dashes and so the content itself
builds a second 'block'. The following examples contains three blocks, the meta information block
and two content blocks.
<pre>
\---
title: The title set by Meta info
\---
This is the 1. content of the file
\---
This is the 2. content of the file
</pre>

However, without naming blocks they cannot be accessed. You can specify the name and the content
formatting using meta information. Look at the following example:
<pre>
\---
title: The title set by Meta info
blocks:
  - \{name: content, format: textile}
  - \{name: sidebar, format: markdown}
\---
This is the 1. content of the file
\---
This is the 2. content of the file
</pre>

The first block in this file is named @content@ and formatted using @textile@. The second block is
named @sidebar@ and formatted using @markdown@.

h2. Content format

h3. Embedded Ruby (ERB)

Before the content is converted to HTML with a specific content handler, ERB is run over the
content. This allows one to add dynamic content to the web pages without using tags. Following is an
example of a page file which uses ERB:

<notextile>
<pre>
\---
title: Test page with ERB
\---
This page has the following meta info items:
&lt;% node.metainfo.each do |key, value| %&gt;
    * &lt;%=key %&gt;: &lt;%=value %&gt;
&lt;% end %&gt;
</pre>
</notextile>

This would output all meta information for the current page. As one can see in the example, the node
for the current page can be accessed by using @node@. The parameter @useERB@ specifies if ERB should
be used. To provide more control, one can enable or disable ERB for a page file by setting the meta
information @useERB@ to @true@ or @false@.

The template will always be processed with ERB!

h3. Format

The content of page description can be written in different formats. Have a look at the
<a href="{relocatable: ../contenthandler}">Content Handlers</a> to get an overview of the existing
formats.

h2. Default settings

As page description files need not have meta information, defaults are used for needed parameters.
If meta information is specified in a page description file, the default values are overridden.

The following defaults are used:

* Content format and name

  If there is only one content in a page description file, its formatting defaults to the parameter
  value @defaultContentFormat@ and it is named @content@.

* Title, ordering and language

  These values are taken from the filename, so the filename of a page description file has to be
  formatted like this: @[ordering.]name[.language].page@ (the values in square brackets are
  optional). In detail:
  * ordering: The ordering is a number which is used for menu generation and the like, where it is
    necessary to order the items. If not specified, defaults to @0@.
  * name: This is used for the title of the page. Hyphens and underscores are replaced with spaces
    and @name@ must not contain any dots. Also: if two page descriptions files have the same
    @name@ part, they should define the same content for different languages as webgen consideres
    them as "one" page file in two languages.
  * language: This is the language code for this file. The codes defined in ISO-639-1 (2 char codes)
    and ISO-639-2 (3 char codes) can/should be used for defining the language. However, you should stick
    to one code and do not use any other code for the same language (i.e. only use @en@ and not
    additionally @eng@ or vice versa). If the language is not specified, it defaults to @en@.

  Consider the following examples:
    * @name.page@ -> title: Name, language: en, ordering: 0
    * @name.de.page@ -> title: Name, language: de, ordering: 0
    * @01.name_of-file.de.page@ -> Title: Name of file, language: de, ordering: 01

  Notice: The first two examples define content for two different languages (en and de) as they have
  the same @name@ part.


h2(#naming). Referencing page description files

The output name of page description files can be specified using the parameter @outputNameStyle@. If
you want to reference a page description file, you can use this output name (e.g. @name.de.html@).
However, if you want to change the @outputNameStyle@ parameter later or set the parameter
@defaultLangInFilename@, this link (@name.de.html@) will not work anymore.

Therefore, each page description file can be referenced by specifing the name
<code>[name_of_page_desc_file].[language].page</code> (e.g. @name.de.page@ instead of
@name.de.html@). However, most of the time, you do not want to explicitly specify the @lang@ part in
this standardified name because you want to reference the page description file and display it in
the currently used language. Thus you can also use <code>[name_of_page_desc_file].page</code> (e.g.
@name.page@). This will always reference the page description file in the correct language!

I could have used the extension @html@ instead of @page@, but I think the latter is better because
the output files need not have to have the extension @html@.

h2(#meta). Meta Information

Meta information can be specified at the beginning of the file as described "here":#structure. Meta
information is formatted using YAML, a simple markup language. For more information about YAML, have
a look at the "www.yaml.org":http://www.yaml.org!

Any information can be specified. The most important use for meta information is to override values
like the title of the page (e.g. if you want dots in it), the ordering and so on. It is also used to
specify the names and the formatting of content blocks in the file.
