---
title: Extensions
---
# Extension Listing

webgen comes with many extensions that allow for rapid creation of static websites. The variety of
the extensions allows you to use your tools of choice, for example, your preferred markup
language. And if your choice is not available, you can write the extension for it yourself or make a
feature request!

Extensions are only loaded when they are needed. For example, if you don't use `.feed` files for
automatically generating atom/RSS feeds for your website, the source handler that handles these
files will never be loaded. Therefore you don't need to explicitly enable extensions, they just sit
in the background and wait until the webgen core needs them.

<%
describe = lambda do |ext|
  n = context.node.tree["#{File.join(context.node.parent.alcn, '/')}#{ext}"]
  "* #{context.dest_node.link_to(n)}: #{h(n['summary'])}"
end
%>

## Content Processors

These extensions process content, i.e. they either convert data from one format to another or make
other changes to the data. Content processors are used, for example, in the transformation pipeline
of page and template files.

It is not specified how content processors have to process the content, they are free to do
anything, even binary transformations (e.g. creating a thumbnail from a picture). Each content
processor is identified by one or more *short names* (used, for example, in the `pipeline` option of
a block in a file in [Webgen Page Format](references/webgen_page_format.html)) which are listed on
the description page of a content processor.

This type of extension can be divided into several groups:

Special purpose processors

: The following processors don't fit in any of the other categories
  below and perform very useful tasks which are nearly always used in the transformation pipeline of
  page/template files:

  <%= describe['contentprocessor/blocks.en.html'] %>
  <%= describe['contentprocessor/tags.en.html'] %>
  <%= describe['contentprocessor/fragments.en.html'] %>
  <%= describe['contentprocessor/head.en.html'] %>


Markup processors

: These processors convert markup text that is easy to read and write to a more
  structured format like HTML. This allows you to write an HTML page without knowing HTML.

  <%= describe['contentprocessor/kramdown.en.html'] %>
  <%= describe['contentprocessor/maruku.en.html'] %>
  <%= describe['contentprocessor/rdiscount.en.html'] %>
  <%= describe['contentprocessor/rdoc.en.html'] %>
  <%= describe['contentprocessor/redcloth.en.html'] %>


Template engines

: These processors are used to add dynamic parts to the processed content.

  <%= describe['contentprocessor/builder.en.html'] %>
  <%= describe['contentprocessor/erb.en.html'] %>
  <%= describe['contentprocessor/erubis.en.html'] %>
  <%= describe['contentprocessor/haml.en.html'] %>


CSS preprocessors

: These processors allow you to write CSS files in an easier way, for example,
  they allow the usage of variables to avoid spreading the same data over the whole file.

  <%= describe['contentprocessor/less.en.html'] %>
  <%= describe['contentprocessor/sass.en.html'] %>
  <%= describe['contentprocessor/scss.en.html'] %>


Post processors

: These processors are used to post-process HTML files.

  <%= describe['contentprocessor/tidy.en.html'] %>
  <%= describe['contentprocessor/xmllint.en.html'] %>



## Outputs

Output extensions are used to write out the generated content. The default configuration for a new
website writes the generated content to the `out` directory of the website directory.

However, one could, for example, create an output extension which directly writes to an FTP or SSH
server.

<%= describe['output/filesystem.en.html'] %>



## Sources

Source extensions provide the paths (and their contents) that are then processed by the [source
handlers](#source-handlers). By default, all paths under the `src` directory are potentially used.

<%= describe['source/filesystem.en.html'] %>
<%= describe['source/tararchive.en.html'] %>



## Source Handlers

These extensions are used for handling source paths. They read the content of a path and produce one
or more nodes (the internal representation of an output path, see [source
handling](manual.html#source-handling) for more information on nodes). A source handler can do
something simple like just copying a source path to the output path but they can also do complex
things like creating a whole image gallery from just one source path.

The path patterns (see the [path pattern documentation](manual.html#source-pathpattern) for more
information) which match the source paths that a source handler uses, are listed on the description
page of each source handler. Additionally, the meta information that is set on any node created by a
specific source handler is also documented.

<%= describe['sourcehandler/copy.en.html'] %>
<%= describe['sourcehandler/directory.en.html'] %>
<%= describe['sourcehandler/feed.en.html'] %>
<%= describe['sourcehandler/metainfo.en.html'] %>
<%= describe['sourcehandler/sitemap.en.html'] %>
<%= describe['sourcehandler/page.en.html'] %>
<%= describe['sourcehandler/template.en.html'] %>
<%= describe['sourcehandler/virtual.en.html'] %>



## Tags

These extensions allow the easy inclusion of dynamic content in, for example, page and template
files. No knowledge of a programming language is needed to make effective use of tags and each tag
is used for a specific task like creating a menu or a breadcrumb trail.

<%= describe['tag/breadcrumbtrail.en.html'] %>
<%= describe['tag/coderay.en.html'] %>
<%= describe['tag/date.en.html'] %>
<%= describe['tag/executecommand.en.html'] %>
<%= describe['tag/includefile.en.html'] %>
<%= describe['tag/langbar.en.html'] %>
<%= describe['tag/link.en.html'] %>
<%= describe['tag/menu.en.html'] %>
<%= describe['tag/metainfo.en.html'] %>
<%= describe['tag/relocatable.en.html'] %>
<%= describe['tag/sitemap.en.html'] %>
<%= describe['tag/tikz.en.html'] %>
