* speed up menu creation by caching the created menu and only substituting the relative paths
* think about logging levels and when to use which level
* better loggers for plugins (substitute real plugin name for "plugin")
* create new document which describes iterations and the steps which are taken in each iteration (high risk first)
* document existing files (RDOC)
* design Thaumaturge logo
* check out http://validator.w3.org/check/referer and http://jigsaw.w3.org/css-validator/check/referer

---- DONE ----

W check if an xml validator is available in ruby
W think about sequence of actions when program is executed
W think about how the data is stored in tree/which data is stored in tree
W set up directory structure and build system
W write ideas and design considerations
W create sample files to work on
W change exception mechanism to use IDs for exceptions
W update all exceptions to new exception format
W implement hooks mechanism
W enable writing of tree again after hooks mechanism installed
W implement page templates using hooks (after dir read store reference to template file in hash)
W review Node class, remove all plugin dependent things
W review configuration class, remove all plugin dependent things
W check if ansi color output is better (for warnings, debug, etc), should be able to turn off
W restructure current files, make more readable
W pagePlugin.buildNode: srcName = File.basename(srcName) in front of urlName = ...
W pagePlugin.get_template_for_node: raise ... if node.nil?
W change the classes which use the listener/composite module because of the refactorization
W refactor current classes
W implement tag <relocatable> for references that should be relocatable
W FileCopyPlugin: check if file has changed and only then copy
W think about how to print out warnings uniformly --> log4r
W define format of config.yaml
W redo configuration file as yaml file
W meta tag replacer - replaces tag with contents of equally named node.metainfo entry
W add yaml page files
W add default values for configuration in configuration.rb
W create super class for page plugins
W implement "creation of files only when necessary" (i.e. if dependencies have changed)
    use modification of source and target to check if source is newer -> changed
    change the behaviour in file copy plugin
W think about configureable list of files patterns which should always be ignored when reading src dir
W replace current logging mechanism with Log4r
W implement <template> meta-info tag (see template based)
W redo tree transformer
W refacture menu tag plugin
W update default.css so that the page display correctly
N convert everything to utf8 before writing -> the file need to have the correct encoding
